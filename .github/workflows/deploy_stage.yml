name: Deploy ECS

on:
  push:
    branches:
      - main
env:
  AWS_REGION: '${{ secrets.AWS_REGION }}'
  ENVIRONMENT: STAGE
  AWS_STAGE: '${{ secrets.AWS_ARN }}'
  REGISTRY: 'ghcr.io'
  TAG: 'latest'

jobs:
  push:
    name: push
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: checkout the source code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: login to ghcr
        id: ghcr
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: build / tag / push docker image into ghcr
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:${{ env.TAG }}

#
#  deploy:
#    needs: push
#    name: deploy
#    runs-on: ubuntu-latest
#
#    permissions:
#      contents: read
#      id-token: write
#
#    steps:
#      - name: checkout the source code
#        uses: actions/checkout@v3
#
#      - name: checkout ecs repo
#        uses: actions/checkout@v3
#        with:
#          repository: sygmaprotocol/devops
#          token: ${{ secrets.GHCR_TOKEN }}
#
#      - name: render jinja2 templates to task definition json files
#        uses: cuchi/jinja2-action@v1.2.0
#        with:
#          template: 'explorer-indexer/ecs/task_definition_${{ env.ENVIRONMENT }}.j2'
#          output_file: 'explorer-indexer/ecs/task_definition_${{ env.ENVIRONMENT }}.json'
#          data_format: json
#          variables: |
#            awsAccountId=${{ env.AWS_STAGE }}
#            awsRegion=${{ env.AWS_REGION }}
#
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          role-to-assume: arn:aws:iam::${{ env.AWS_STAGE }}:role/github-actions-${{ env.ENVIRONMENT }}-chainbridge
#          aws-region: ${{ env.AWS_REGION }}
#          role-session-name: GithubActions
#
#      - name: Deploy to Amazon ECS
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ecs/task_definition_${{ env.ENVIRONMENT }}.json
#          service: explorer-indexer-service-${{ env.ENVIRONMENT }}
#          cluster: explorer-indexer-${{ env.ENVIRONMENT }}
#          wait-for-service-stability: true
