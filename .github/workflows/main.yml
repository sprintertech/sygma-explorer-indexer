name: CI
on:
  push:
    branches: [ main ]
      # when any of these versions receive a push
    tags:
      - "v*.*.*"
  pull_request:
    branches: [ main ]
    tags:
      - "v*.*.*"

  # when any releases are created
  release:
    types:
      - created

env:
  FORCE_COLOR: 2

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run the tests
    steps:
      - uses: actions/checkout@v2
      - uses: c-hive/gha-yarn-cache@v2
      - name: Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install -g yarn
      - name: yarn install, build and test
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          yarn --ignore-engines
          yarn build
          yarn test

  build-and-deploy:
    name: Docker Deployment
    runs-on: ubuntu-latest
    # requires these jobs to run first
    needs: [test]
    # if check not passed, job will be skipped
    if: github.ref == 'refs/heads/main' || contains(github.ref, '/tags/v')
    # list steps
    steps:
    # prepares docker images
      - name: Prepare
        id: prep
        run: |
          # creates local variable of chainbridge docker image
          DOCKER_IMAGE=chainsafe/chainbridge-explorer-indexer
          echo DOCKER_IMAGE $DOCKER_IMAGE
          # creates local variable of commit hash that triggered workflow
          COMMIT_HASH=$(echo $GITHUB_SHA | head -c7)
          echo COMMIT_HASH $COMMIT_HASH
          # creates local variable to hold docker images
          TAGS="${DOCKER_IMAGE}:${COMMIT_HASH},${DOCKER_IMAGE}:latest"
          echo TAGS $TAGS
          # check if branch/tag that triggered workflow was from tags
          echo GITHUB_REF $GITHUB_REF
          if [[ $GITHUB_REF == refs/tags/* ]]; then

            # set version
            VERSION=${GITHUB_REF#refs/tags/v}
            echo VERSION $VERSION
            # append version to tags
            TAGS="${TAGS},${DOCKER_IMAGE}:${VERSION}"
            echo TAGS REFS $TAGS
          fi

          # sets output of step
          echo ::set-output name=tags::${TAGS}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.prep.outputs.tags }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
